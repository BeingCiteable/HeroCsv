name: Release to NuGet

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        type: string

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4

    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}" # Remove 'v' prefix if present
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        echo "Version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Validate version format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-preview"
          exit 1
        fi

  build-and-publish:
    needs: validate-version
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x
          9.0.x

    - name: Update version
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        # Update version in csproj file
        sed -i "s|<PackageVersion>.*</PackageVersion>|<PackageVersion>$VERSION</PackageVersion>|" src/FastCsv/FastCsv.csproj
        # Also update AssemblyVersion and FileVersion
        sed -i "s|<Version>.*</Version>|<Version>$VERSION</Version>|" src/FastCsv/FastCsv.csproj || true

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build -c Release --no-restore

    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal

    - name: Pack
      run: dotnet pack src/FastCsv/FastCsv.csproj -c Release --no-build --output ./artifacts

    - name: Push to NuGet
      run: |
        dotnet nuget push ./artifacts/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

    - name: Push to GitHub Packages
      run: |
        dotnet nuget push ./artifacts/*.nupkg \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
          --skip-duplicate

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'release'
      with:
        files: |
          ./artifacts/*.nupkg
          ./artifacts/*.snupkg

    - name: Create release tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a "v${{ needs.validate-version.outputs.version }}" -m "Release v${{ needs.validate-version.outputs.version }}"
        git push origin "v${{ needs.validate-version.outputs.version }}"