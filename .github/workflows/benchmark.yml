name: Benchmarks

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  benchmark:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build -c Release --no-restore

    - name: Run benchmarks
      run: |
        cd benchmarks/FastCsv.Benchmarks
        dotnet run -c Release --no-build -- --filter "*" --exporters json --job short

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: benchmarks/FastCsv.Benchmarks/BenchmarkDotNet.Artifacts/**/*
        retention-days: 30

    - name: Comment PR with benchmark results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the latest benchmark results
          const resultsPath = 'benchmarks/FastCsv.Benchmarks/BenchmarkDotNet.Artifacts/results';
          if (!fs.existsSync(resultsPath)) {
            console.log('No benchmark results found');
            return;
          }
          
          // Read the first JSON file found
          const files = fs.readdirSync(resultsPath).filter(f => f.endsWith('.json'));
          if (files.length === 0) {
            console.log('No JSON benchmark results found');
            return;
          }
          
          const results = JSON.parse(fs.readFileSync(path.join(resultsPath, files[0]), 'utf8'));
          
          // Format results as markdown
          let comment = '## Benchmark Results\n\n';
          comment += '| Method | Mean | Error | StdDev | Allocated |\n';
          comment += '|--------|------|-------|--------|----------|\n';
          
          results.Benchmarks?.forEach(benchmark => {
            const stats = benchmark.Statistics;
            comment += `| ${benchmark.Method} | ${stats?.Mean?.toFixed(2) || 'N/A'} ns | ${stats?.StandardError?.toFixed(2) || 'N/A'} ns | ${stats?.StandardDeviation?.toFixed(2) || 'N/A'} ns | ${benchmark.Memory?.BytesAllocatedPerOperation || 0} B |\n`;
          });
          
          // Post comment
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });